/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface UbiquityAlgorithmicDollarManagerInterface
  extends ethers.utils.Interface {
  functions: {
    "BONDING_MANAGER_ROLE()": FunctionFragment;
    "COUPON_MANAGER_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "INCENTIVE_MANAGER_ROLE()": FunctionFragment;
    "PAUSER_ROLE()": FunctionFragment;
    "UBQ_BURNER_ROLE()": FunctionFragment;
    "UBQ_MINTER_ROLE()": FunctionFragment;
    "UBQ_TOKEN_MANAGER_ROLE()": FunctionFragment;
    "autoRedeemTokenAddress()": FunctionFragment;
    "bondingContractAddress()": FunctionFragment;
    "bondingShareAddress()": FunctionFragment;
    "couponCalculatorAddress()": FunctionFragment;
    "curve3PoolTokenAddress()": FunctionFragment;
    "debtCouponAddress()": FunctionFragment;
    "deployStableSwapPool(address,address,address,uint256,uint256)": FunctionFragment;
    "dollarMintingCalculatorAddress()": FunctionFragment;
    "dollarTokenAddress()": FunctionFragment;
    "formulasAddress()": FunctionFragment;
    "getExcessDollarsDistributor(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "governanceTokenAddress()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "masterChefAddress()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setBondingContractAddress(address)": FunctionFragment;
    "setBondingShareAddress(address)": FunctionFragment;
    "setCouponCalculatorAddress(address)": FunctionFragment;
    "setDebtCouponAddress(address)": FunctionFragment;
    "setDollarMintingCalculatorAddress(address)": FunctionFragment;
    "setDollarTokenAddress(address)": FunctionFragment;
    "setExcessDollarsDistributor(address,address)": FunctionFragment;
    "setFormulasAddress(address)": FunctionFragment;
    "setGovernanceTokenAddress(address)": FunctionFragment;
    "setIncentiveToUAD(address,address)": FunctionFragment;
    "setMasterChefAddress(address)": FunctionFragment;
    "setStableSwapMetaPoolAddress(address)": FunctionFragment;
    "setSushiSwapPoolAddress(address)": FunctionFragment;
    "setTreasuryAddress(address)": FunctionFragment;
    "setTwapOracleAddress(address)": FunctionFragment;
    "setUARCalculatorAddress(address)": FunctionFragment;
    "setuARTokenAddress(address)": FunctionFragment;
    "stableSwapMetaPoolAddress()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "sushiSwapPoolAddress()": FunctionFragment;
    "treasuryAddress()": FunctionFragment;
    "twapOracleAddress()": FunctionFragment;
    "uarCalculatorAddress()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BONDING_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COUPON_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INCENTIVE_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UBQ_BURNER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UBQ_MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UBQ_TOKEN_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "autoRedeemTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bondingContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bondingShareAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "couponCalculatorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "curve3PoolTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "debtCouponAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployStableSwapPool",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dollarMintingCalculatorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dollarTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "formulasAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExcessDollarsDistributor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "masterChefAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBondingContractAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBondingShareAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCouponCalculatorAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDebtCouponAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDollarMintingCalculatorAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDollarTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setExcessDollarsDistributor",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFormulasAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernanceTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setIncentiveToUAD",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMasterChefAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStableSwapMetaPoolAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSushiSwapPoolAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTwapOracleAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUARCalculatorAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setuARTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stableSwapMetaPoolAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sushiSwapPoolAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "twapOracleAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uarCalculatorAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BONDING_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COUPON_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INCENTIVE_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UBQ_BURNER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UBQ_MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UBQ_TOKEN_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "autoRedeemTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondingContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondingShareAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "couponCalculatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "curve3PoolTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtCouponAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployStableSwapPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dollarMintingCalculatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dollarTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "formulasAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExcessDollarsDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "masterChefAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBondingContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBondingShareAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCouponCalculatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDebtCouponAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDollarMintingCalculatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDollarTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExcessDollarsDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFormulasAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernanceTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIncentiveToUAD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMasterChefAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStableSwapMetaPoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSushiSwapPoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTwapOracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUARCalculatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setuARTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableSwapMetaPoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sushiSwapPoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "twapOracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uarCalculatorAddress",
    data: BytesLike
  ): Result;

  events: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export class UbiquityAlgorithmicDollarManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: UbiquityAlgorithmicDollarManagerInterface;

  functions: {
    BONDING_MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "BONDING_MANAGER_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    COUPON_MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "COUPON_MANAGER_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    INCENTIVE_MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "INCENTIVE_MANAGER_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "PAUSER_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    UBQ_BURNER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "UBQ_BURNER_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    UBQ_MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "UBQ_MINTER_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    UBQ_TOKEN_MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "UBQ_TOKEN_MANAGER_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    autoRedeemTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    "autoRedeemTokenAddress()"(overrides?: CallOverrides): Promise<[string]>;

    bondingContractAddress(overrides?: CallOverrides): Promise<[string]>;

    "bondingContractAddress()"(overrides?: CallOverrides): Promise<[string]>;

    bondingShareAddress(overrides?: CallOverrides): Promise<[string]>;

    "bondingShareAddress()"(overrides?: CallOverrides): Promise<[string]>;

    couponCalculatorAddress(overrides?: CallOverrides): Promise<[string]>;

    "couponCalculatorAddress()"(overrides?: CallOverrides): Promise<[string]>;

    curve3PoolTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    "curve3PoolTokenAddress()"(overrides?: CallOverrides): Promise<[string]>;

    debtCouponAddress(overrides?: CallOverrides): Promise<[string]>;

    "debtCouponAddress()"(overrides?: CallOverrides): Promise<[string]>;

    deployStableSwapPool(
      _curveFactory: string,
      _crvBasePool: string,
      _crv3PoolTokenAddress: string,
      _amplificationCoefficient: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deployStableSwapPool(address,address,address,uint256,uint256)"(
      _curveFactory: string,
      _crvBasePool: string,
      _crv3PoolTokenAddress: string,
      _amplificationCoefficient: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dollarMintingCalculatorAddress(
      overrides?: CallOverrides
    ): Promise<[string]>;

    "dollarMintingCalculatorAddress()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    dollarTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    "dollarTokenAddress()"(overrides?: CallOverrides): Promise<[string]>;

    formulasAddress(overrides?: CallOverrides): Promise<[string]>;

    "formulasAddress()"(overrides?: CallOverrides): Promise<[string]>;

    getExcessDollarsDistributor(
      _debtCouponManagerAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getExcessDollarsDistributor(address)"(
      _debtCouponManagerAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    governanceTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    "governanceTokenAddress()"(overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    masterChefAddress(overrides?: CallOverrides): Promise<[string]>;

    "masterChefAddress()"(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBondingContractAddress(
      _bondingContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setBondingContractAddress(address)"(
      _bondingContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBondingShareAddress(
      _bondingShareAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setBondingShareAddress(address)"(
      _bondingShareAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCouponCalculatorAddress(
      _couponCalculatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setCouponCalculatorAddress(address)"(
      _couponCalculatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDebtCouponAddress(
      _debtCouponAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setDebtCouponAddress(address)"(
      _debtCouponAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDollarMintingCalculatorAddress(
      _dollarMintingCalculatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setDollarMintingCalculatorAddress(address)"(
      _dollarMintingCalculatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDollarTokenAddress(
      _dollarTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setDollarTokenAddress(address)"(
      _dollarTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExcessDollarsDistributor(
      debtCouponManagerAddress: string,
      excessCouponDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setExcessDollarsDistributor(address,address)"(
      debtCouponManagerAddress: string,
      excessCouponDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFormulasAddress(
      _formulasAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setFormulasAddress(address)"(
      _formulasAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGovernanceTokenAddress(
      _governanceTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setGovernanceTokenAddress(address)"(
      _governanceTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIncentiveToUAD(
      _account: string,
      _incentiveAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setIncentiveToUAD(address,address)"(
      _account: string,
      _incentiveAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMasterChefAddress(
      _masterChefAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMasterChefAddress(address)"(
      _masterChefAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStableSwapMetaPoolAddress(
      _stableSwapMetaPoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setStableSwapMetaPoolAddress(address)"(
      _stableSwapMetaPoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSushiSwapPoolAddress(
      _sushiSwapPoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setSushiSwapPoolAddress(address)"(
      _sushiSwapPoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTreasuryAddress(address)"(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTwapOracleAddress(
      _twapOracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTwapOracleAddress(address)"(
      _twapOracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUARCalculatorAddress(
      _uarCalculatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setUARCalculatorAddress(address)"(
      _uarCalculatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setuARTokenAddress(
      _uarTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setuARTokenAddress(address)"(
      _uarTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stableSwapMetaPoolAddress(overrides?: CallOverrides): Promise<[string]>;

    "stableSwapMetaPoolAddress()"(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    sushiSwapPoolAddress(overrides?: CallOverrides): Promise<[string]>;

    "sushiSwapPoolAddress()"(overrides?: CallOverrides): Promise<[string]>;

    treasuryAddress(overrides?: CallOverrides): Promise<[string]>;

    "treasuryAddress()"(overrides?: CallOverrides): Promise<[string]>;

    twapOracleAddress(overrides?: CallOverrides): Promise<[string]>;

    "twapOracleAddress()"(overrides?: CallOverrides): Promise<[string]>;

    uarCalculatorAddress(overrides?: CallOverrides): Promise<[string]>;

    "uarCalculatorAddress()"(overrides?: CallOverrides): Promise<[string]>;
  };

  BONDING_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  "BONDING_MANAGER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  COUPON_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  "COUPON_MANAGER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  INCENTIVE_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  "INCENTIVE_MANAGER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  "PAUSER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  UBQ_BURNER_ROLE(overrides?: CallOverrides): Promise<string>;

  "UBQ_BURNER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  UBQ_MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

  "UBQ_MINTER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  UBQ_TOKEN_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  "UBQ_TOKEN_MANAGER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  autoRedeemTokenAddress(overrides?: CallOverrides): Promise<string>;

  "autoRedeemTokenAddress()"(overrides?: CallOverrides): Promise<string>;

  bondingContractAddress(overrides?: CallOverrides): Promise<string>;

  "bondingContractAddress()"(overrides?: CallOverrides): Promise<string>;

  bondingShareAddress(overrides?: CallOverrides): Promise<string>;

  "bondingShareAddress()"(overrides?: CallOverrides): Promise<string>;

  couponCalculatorAddress(overrides?: CallOverrides): Promise<string>;

  "couponCalculatorAddress()"(overrides?: CallOverrides): Promise<string>;

  curve3PoolTokenAddress(overrides?: CallOverrides): Promise<string>;

  "curve3PoolTokenAddress()"(overrides?: CallOverrides): Promise<string>;

  debtCouponAddress(overrides?: CallOverrides): Promise<string>;

  "debtCouponAddress()"(overrides?: CallOverrides): Promise<string>;

  deployStableSwapPool(
    _curveFactory: string,
    _crvBasePool: string,
    _crv3PoolTokenAddress: string,
    _amplificationCoefficient: BigNumberish,
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deployStableSwapPool(address,address,address,uint256,uint256)"(
    _curveFactory: string,
    _crvBasePool: string,
    _crv3PoolTokenAddress: string,
    _amplificationCoefficient: BigNumberish,
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dollarMintingCalculatorAddress(overrides?: CallOverrides): Promise<string>;

  "dollarMintingCalculatorAddress()"(
    overrides?: CallOverrides
  ): Promise<string>;

  dollarTokenAddress(overrides?: CallOverrides): Promise<string>;

  "dollarTokenAddress()"(overrides?: CallOverrides): Promise<string>;

  formulasAddress(overrides?: CallOverrides): Promise<string>;

  "formulasAddress()"(overrides?: CallOverrides): Promise<string>;

  getExcessDollarsDistributor(
    _debtCouponManagerAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getExcessDollarsDistributor(address)"(
    _debtCouponManagerAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  governanceTokenAddress(overrides?: CallOverrides): Promise<string>;

  "governanceTokenAddress()"(overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  masterChefAddress(overrides?: CallOverrides): Promise<string>;

  "masterChefAddress()"(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBondingContractAddress(
    _bondingContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setBondingContractAddress(address)"(
    _bondingContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBondingShareAddress(
    _bondingShareAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setBondingShareAddress(address)"(
    _bondingShareAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCouponCalculatorAddress(
    _couponCalculatorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setCouponCalculatorAddress(address)"(
    _couponCalculatorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDebtCouponAddress(
    _debtCouponAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setDebtCouponAddress(address)"(
    _debtCouponAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDollarMintingCalculatorAddress(
    _dollarMintingCalculatorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setDollarMintingCalculatorAddress(address)"(
    _dollarMintingCalculatorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDollarTokenAddress(
    _dollarTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setDollarTokenAddress(address)"(
    _dollarTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExcessDollarsDistributor(
    debtCouponManagerAddress: string,
    excessCouponDistributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setExcessDollarsDistributor(address,address)"(
    debtCouponManagerAddress: string,
    excessCouponDistributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFormulasAddress(
    _formulasAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setFormulasAddress(address)"(
    _formulasAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGovernanceTokenAddress(
    _governanceTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setGovernanceTokenAddress(address)"(
    _governanceTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIncentiveToUAD(
    _account: string,
    _incentiveAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setIncentiveToUAD(address,address)"(
    _account: string,
    _incentiveAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMasterChefAddress(
    _masterChefAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMasterChefAddress(address)"(
    _masterChefAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStableSwapMetaPoolAddress(
    _stableSwapMetaPoolAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setStableSwapMetaPoolAddress(address)"(
    _stableSwapMetaPoolAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSushiSwapPoolAddress(
    _sushiSwapPoolAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setSushiSwapPoolAddress(address)"(
    _sushiSwapPoolAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasuryAddress(
    _treasuryAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTreasuryAddress(address)"(
    _treasuryAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTwapOracleAddress(
    _twapOracleAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTwapOracleAddress(address)"(
    _twapOracleAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUARCalculatorAddress(
    _uarCalculatorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setUARCalculatorAddress(address)"(
    _uarCalculatorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setuARTokenAddress(
    _uarTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setuARTokenAddress(address)"(
    _uarTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stableSwapMetaPoolAddress(overrides?: CallOverrides): Promise<string>;

  "stableSwapMetaPoolAddress()"(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  sushiSwapPoolAddress(overrides?: CallOverrides): Promise<string>;

  "sushiSwapPoolAddress()"(overrides?: CallOverrides): Promise<string>;

  treasuryAddress(overrides?: CallOverrides): Promise<string>;

  "treasuryAddress()"(overrides?: CallOverrides): Promise<string>;

  twapOracleAddress(overrides?: CallOverrides): Promise<string>;

  "twapOracleAddress()"(overrides?: CallOverrides): Promise<string>;

  uarCalculatorAddress(overrides?: CallOverrides): Promise<string>;

  "uarCalculatorAddress()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BONDING_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    "BONDING_MANAGER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    COUPON_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    "COUPON_MANAGER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    INCENTIVE_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    "INCENTIVE_MANAGER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    "PAUSER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    UBQ_BURNER_ROLE(overrides?: CallOverrides): Promise<string>;

    "UBQ_BURNER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    UBQ_MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

    "UBQ_MINTER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    UBQ_TOKEN_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    "UBQ_TOKEN_MANAGER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    autoRedeemTokenAddress(overrides?: CallOverrides): Promise<string>;

    "autoRedeemTokenAddress()"(overrides?: CallOverrides): Promise<string>;

    bondingContractAddress(overrides?: CallOverrides): Promise<string>;

    "bondingContractAddress()"(overrides?: CallOverrides): Promise<string>;

    bondingShareAddress(overrides?: CallOverrides): Promise<string>;

    "bondingShareAddress()"(overrides?: CallOverrides): Promise<string>;

    couponCalculatorAddress(overrides?: CallOverrides): Promise<string>;

    "couponCalculatorAddress()"(overrides?: CallOverrides): Promise<string>;

    curve3PoolTokenAddress(overrides?: CallOverrides): Promise<string>;

    "curve3PoolTokenAddress()"(overrides?: CallOverrides): Promise<string>;

    debtCouponAddress(overrides?: CallOverrides): Promise<string>;

    "debtCouponAddress()"(overrides?: CallOverrides): Promise<string>;

    deployStableSwapPool(
      _curveFactory: string,
      _crvBasePool: string,
      _crv3PoolTokenAddress: string,
      _amplificationCoefficient: BigNumberish,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deployStableSwapPool(address,address,address,uint256,uint256)"(
      _curveFactory: string,
      _crvBasePool: string,
      _crv3PoolTokenAddress: string,
      _amplificationCoefficient: BigNumberish,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    dollarMintingCalculatorAddress(overrides?: CallOverrides): Promise<string>;

    "dollarMintingCalculatorAddress()"(
      overrides?: CallOverrides
    ): Promise<string>;

    dollarTokenAddress(overrides?: CallOverrides): Promise<string>;

    "dollarTokenAddress()"(overrides?: CallOverrides): Promise<string>;

    formulasAddress(overrides?: CallOverrides): Promise<string>;

    "formulasAddress()"(overrides?: CallOverrides): Promise<string>;

    getExcessDollarsDistributor(
      _debtCouponManagerAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getExcessDollarsDistributor(address)"(
      _debtCouponManagerAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    governanceTokenAddress(overrides?: CallOverrides): Promise<string>;

    "governanceTokenAddress()"(overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    masterChefAddress(overrides?: CallOverrides): Promise<string>;

    "masterChefAddress()"(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBondingContractAddress(
      _bondingContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBondingContractAddress(address)"(
      _bondingContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBondingShareAddress(
      _bondingShareAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBondingShareAddress(address)"(
      _bondingShareAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCouponCalculatorAddress(
      _couponCalculatorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCouponCalculatorAddress(address)"(
      _couponCalculatorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDebtCouponAddress(
      _debtCouponAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDebtCouponAddress(address)"(
      _debtCouponAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDollarMintingCalculatorAddress(
      _dollarMintingCalculatorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDollarMintingCalculatorAddress(address)"(
      _dollarMintingCalculatorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDollarTokenAddress(
      _dollarTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDollarTokenAddress(address)"(
      _dollarTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setExcessDollarsDistributor(
      debtCouponManagerAddress: string,
      excessCouponDistributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setExcessDollarsDistributor(address,address)"(
      debtCouponManagerAddress: string,
      excessCouponDistributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFormulasAddress(
      _formulasAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFormulasAddress(address)"(
      _formulasAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernanceTokenAddress(
      _governanceTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGovernanceTokenAddress(address)"(
      _governanceTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setIncentiveToUAD(
      _account: string,
      _incentiveAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setIncentiveToUAD(address,address)"(
      _account: string,
      _incentiveAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMasterChefAddress(
      _masterChefAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMasterChefAddress(address)"(
      _masterChefAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStableSwapMetaPoolAddress(
      _stableSwapMetaPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setStableSwapMetaPoolAddress(address)"(
      _stableSwapMetaPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSushiSwapPoolAddress(
      _sushiSwapPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSushiSwapPoolAddress(address)"(
      _sushiSwapPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTreasuryAddress(address)"(
      _treasuryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTwapOracleAddress(
      _twapOracleAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTwapOracleAddress(address)"(
      _twapOracleAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUARCalculatorAddress(
      _uarCalculatorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUARCalculatorAddress(address)"(
      _uarCalculatorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setuARTokenAddress(
      _uarTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setuARTokenAddress(address)"(
      _uarTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stableSwapMetaPoolAddress(overrides?: CallOverrides): Promise<string>;

    "stableSwapMetaPoolAddress()"(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    sushiSwapPoolAddress(overrides?: CallOverrides): Promise<string>;

    "sushiSwapPoolAddress()"(overrides?: CallOverrides): Promise<string>;

    treasuryAddress(overrides?: CallOverrides): Promise<string>;

    "treasuryAddress()"(overrides?: CallOverrides): Promise<string>;

    twapOracleAddress(overrides?: CallOverrides): Promise<string>;

    "twapOracleAddress()"(overrides?: CallOverrides): Promise<string>;

    uarCalculatorAddress(overrides?: CallOverrides): Promise<string>;

    "uarCalculatorAddress()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;
  };

  estimateGas: {
    BONDING_MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "BONDING_MANAGER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    COUPON_MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "COUPON_MANAGER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    INCENTIVE_MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "INCENTIVE_MANAGER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "PAUSER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    UBQ_BURNER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "UBQ_BURNER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    UBQ_MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "UBQ_MINTER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    UBQ_TOKEN_MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "UBQ_TOKEN_MANAGER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    autoRedeemTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "autoRedeemTokenAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    bondingContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "bondingContractAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    bondingShareAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "bondingShareAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    couponCalculatorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "couponCalculatorAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    curve3PoolTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "curve3PoolTokenAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    debtCouponAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "debtCouponAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    deployStableSwapPool(
      _curveFactory: string,
      _crvBasePool: string,
      _crv3PoolTokenAddress: string,
      _amplificationCoefficient: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deployStableSwapPool(address,address,address,uint256,uint256)"(
      _curveFactory: string,
      _crvBasePool: string,
      _crv3PoolTokenAddress: string,
      _amplificationCoefficient: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dollarMintingCalculatorAddress(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dollarMintingCalculatorAddress()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dollarTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "dollarTokenAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    formulasAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "formulasAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    getExcessDollarsDistributor(
      _debtCouponManagerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getExcessDollarsDistributor(address)"(
      _debtCouponManagerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governanceTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "governanceTokenAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    masterChefAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "masterChefAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBondingContractAddress(
      _bondingContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setBondingContractAddress(address)"(
      _bondingContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBondingShareAddress(
      _bondingShareAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setBondingShareAddress(address)"(
      _bondingShareAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCouponCalculatorAddress(
      _couponCalculatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setCouponCalculatorAddress(address)"(
      _couponCalculatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDebtCouponAddress(
      _debtCouponAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setDebtCouponAddress(address)"(
      _debtCouponAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDollarMintingCalculatorAddress(
      _dollarMintingCalculatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setDollarMintingCalculatorAddress(address)"(
      _dollarMintingCalculatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDollarTokenAddress(
      _dollarTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setDollarTokenAddress(address)"(
      _dollarTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExcessDollarsDistributor(
      debtCouponManagerAddress: string,
      excessCouponDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setExcessDollarsDistributor(address,address)"(
      debtCouponManagerAddress: string,
      excessCouponDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFormulasAddress(
      _formulasAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setFormulasAddress(address)"(
      _formulasAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGovernanceTokenAddress(
      _governanceTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setGovernanceTokenAddress(address)"(
      _governanceTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIncentiveToUAD(
      _account: string,
      _incentiveAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setIncentiveToUAD(address,address)"(
      _account: string,
      _incentiveAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMasterChefAddress(
      _masterChefAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMasterChefAddress(address)"(
      _masterChefAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStableSwapMetaPoolAddress(
      _stableSwapMetaPoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setStableSwapMetaPoolAddress(address)"(
      _stableSwapMetaPoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSushiSwapPoolAddress(
      _sushiSwapPoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setSushiSwapPoolAddress(address)"(
      _sushiSwapPoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTreasuryAddress(address)"(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTwapOracleAddress(
      _twapOracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTwapOracleAddress(address)"(
      _twapOracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUARCalculatorAddress(
      _uarCalculatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setUARCalculatorAddress(address)"(
      _uarCalculatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setuARTokenAddress(
      _uarTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setuARTokenAddress(address)"(
      _uarTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stableSwapMetaPoolAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "stableSwapMetaPoolAddress()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sushiSwapPoolAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "sushiSwapPoolAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "treasuryAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    twapOracleAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "twapOracleAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    uarCalculatorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "uarCalculatorAddress()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BONDING_MANAGER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "BONDING_MANAGER_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    COUPON_MANAGER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "COUPON_MANAGER_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INCENTIVE_MANAGER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "INCENTIVE_MANAGER_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PAUSER_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UBQ_BURNER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "UBQ_BURNER_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UBQ_MINTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "UBQ_MINTER_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UBQ_TOKEN_MANAGER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "UBQ_TOKEN_MANAGER_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    autoRedeemTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "autoRedeemTokenAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondingContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bondingContractAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondingShareAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bondingShareAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    couponCalculatorAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "couponCalculatorAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    curve3PoolTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "curve3PoolTokenAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtCouponAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "debtCouponAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployStableSwapPool(
      _curveFactory: string,
      _crvBasePool: string,
      _crv3PoolTokenAddress: string,
      _amplificationCoefficient: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deployStableSwapPool(address,address,address,uint256,uint256)"(
      _curveFactory: string,
      _crvBasePool: string,
      _crv3PoolTokenAddress: string,
      _amplificationCoefficient: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dollarMintingCalculatorAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dollarMintingCalculatorAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dollarTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dollarTokenAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    formulasAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "formulasAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExcessDollarsDistributor(
      _debtCouponManagerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getExcessDollarsDistributor(address)"(
      _debtCouponManagerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governanceTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "governanceTokenAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    masterChefAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "masterChefAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBondingContractAddress(
      _bondingContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setBondingContractAddress(address)"(
      _bondingContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBondingShareAddress(
      _bondingShareAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setBondingShareAddress(address)"(
      _bondingShareAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCouponCalculatorAddress(
      _couponCalculatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setCouponCalculatorAddress(address)"(
      _couponCalculatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDebtCouponAddress(
      _debtCouponAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setDebtCouponAddress(address)"(
      _debtCouponAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDollarMintingCalculatorAddress(
      _dollarMintingCalculatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setDollarMintingCalculatorAddress(address)"(
      _dollarMintingCalculatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDollarTokenAddress(
      _dollarTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setDollarTokenAddress(address)"(
      _dollarTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExcessDollarsDistributor(
      debtCouponManagerAddress: string,
      excessCouponDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setExcessDollarsDistributor(address,address)"(
      debtCouponManagerAddress: string,
      excessCouponDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFormulasAddress(
      _formulasAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setFormulasAddress(address)"(
      _formulasAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGovernanceTokenAddress(
      _governanceTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setGovernanceTokenAddress(address)"(
      _governanceTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIncentiveToUAD(
      _account: string,
      _incentiveAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setIncentiveToUAD(address,address)"(
      _account: string,
      _incentiveAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMasterChefAddress(
      _masterChefAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMasterChefAddress(address)"(
      _masterChefAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStableSwapMetaPoolAddress(
      _stableSwapMetaPoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setStableSwapMetaPoolAddress(address)"(
      _stableSwapMetaPoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSushiSwapPoolAddress(
      _sushiSwapPoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setSushiSwapPoolAddress(address)"(
      _sushiSwapPoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTreasuryAddress(address)"(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTwapOracleAddress(
      _twapOracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTwapOracleAddress(address)"(
      _twapOracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUARCalculatorAddress(
      _uarCalculatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setUARCalculatorAddress(address)"(
      _uarCalculatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setuARTokenAddress(
      _uarTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setuARTokenAddress(address)"(
      _uarTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stableSwapMetaPoolAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stableSwapMetaPoolAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sushiSwapPoolAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sushiSwapPoolAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "treasuryAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    twapOracleAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "twapOracleAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uarCalculatorAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "uarCalculatorAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
